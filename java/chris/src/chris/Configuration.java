package chris;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Date;
import java.util.Properties;

/**
 *  Управление конфигурационным файлом приложения.
 * @author su
 */
public class Configuration {

    /**
     * Конструктор
     * @param стрИмяКонфигурационногоФайла
     * @param заголовокФайла
     * @throws Crash
     */
    public Configuration(String стрИмяКонфигурационногоФайла, String заголовокФайла) {

        // Проверить инициализирован ли файл конфигурации
        this.файлКонфигурации = new File(стрИмяКонфигурационногоФайла);
        this.заголовокФайла = заголовокФайла;
        if      // файла нет ли он пустой? создать, заполнить параметрами по умолчанию.
                (!файлКонфигурации.exists() || файлКонфигурации.length()==0)
            ИнициализироватьКонфигурационныйФайлУмолчаниями();
        else {  // иначе, загрузить параметры из файла
            FileReader конФайл = null;
            try {
                конФайл = new FileReader(файлКонфигурации);
            } catch (FileNotFoundException ex) {
                throw new Crash("Ошибка открытия файла конфигурации. Проверьте существует ли файл \"" +
                        стрИмяКонфигурационногоФайла + "\"");
            }
            try {
                свойстваПриложения.load(конФайл);
            } catch (IOException ex) {
                throw new Crash("Ошибка чтения параметров конфигурации. Проверьте текст файла \"" +
                        стрИмяКонфигурационногоФайла + "\"");
            }
        }
            
    }   // конструктор

    //^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v
    //
    //                            Методы внешнего интерфейса
    //
    //v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^

    /**
     * Взять параметр приложения без преобразования строки в другой тип.
     * @param стрИмяПараметра
     * @return
     */
    public String взять_как_строку(String стрИмяПараметра) {
        String стр = свойстваПриложения.getProperty(стрИмяПараметра);
        if      // не найден параметр? неисправимая ошибка, завершить приложение
                (стр == null)
        {
            throw new Crash("Ошибка. Параметр \"" + стрИмяПараметра + "\" не найден в конфигурационном файле.");
        }

        return стр;
    }

    /**
     * Взять параметр приложения и преобазовать его в булево значение.
     * @param стрИмяПараметра
     * @return true/false
     */
    public boolean взять_как_бульон(String стрИмяПараметра) {

        String стр = свойстваПриложения.getProperty(стрИмяПараметра);
        if      // не найден параметр? неисправимая ошибка, завершить приложение
                (стр == null)
        {   
            throw new Crash("Ошибка. Параметр \"" + стрИмяПараметра + "\" не найден в конфигурационном файле.");
        }
        if
                (стр.equalsIgnoreCase("д") || стр.equalsIgnoreCase("да") ||
                стр.equalsIgnoreCase("y") || стр.equalsIgnoreCase("yes") || стр.equals("1"))
            return true;
        else if
                (стр.equalsIgnoreCase("н") || стр.equalsIgnoreCase("нет") ||
                стр.equalsIgnoreCase("n") || стр.equalsIgnoreCase("no") || стр.equals("0"))
            return false;
        else {  // неисправимая ошибка, завершить приложение
            throw new Crash("Ошибка преобразования параметра конфигурации \"" + стрИмяПараметра + "\" в булево.");
        }
    }

    /**
     * Взять параметр, преобразовав его в целое.
     * @param стрИмяПараметра
     * @return целое значение параметра.
     */
    public int взять_как_целое(String стрИмяПараметра) {
        
        int целоеПараметр = 0;
        try {
            целоеПараметр = Integer.parseInt(свойстваПриложения.getProperty(стрИмяПараметра));
        } catch (NumberFormatException ex)
        {  // неисправимая ошибка, завершить приложение
            throw new Crash("Ошибка преобразования параметра конфигурации \"" + стрИмяПараметра + "\" в целое.");
        }
        
        return целоеПараметр;
    }

    /**
     * Взять параметр, преобразовав его во float.
     * @param стрИмяПараметра
     * @return значение параметра.
     */
    public float взять_как_плавающую_точку(String стрИмяПараметра) {

        float плПараметр = 0;
        try {
            плПараметр  = Float.parseFloat(свойстваПриложения.getProperty(стрИмяПараметра));
        } catch (NumberFormatException ex)
        {  // неисправимая ошибка, завершить приложение
            throw new Crash("Ошибка преобразования параметра конфигурации \"" + стрИмяПараметра + "\" в целое.");
        }

        return плПараметр;
    }

    /**
     * Взять параметр, преобразовав его в Date. Формат
     * @param стрИмяПараметра
     * @return значение параметра.
     */
    public Date взять_как_дату(String стрИмяПараметра) {

        try {
            return Glob.дата_время_в_Date(свойстваПриложения.getProperty(стрИмяПараметра));
        } catch (Crash ex) {
            // неисправимая ошибка, завершить приложение
            throw new Crash("Ошибка преобразования в дату параметра конфигурации \"" + стрИмяПараметра +
                    "=" + свойстваПриложения.getProperty(стрИмяПараметра) + "\".");
        }
    }

    /**
     * Добавить параметр в набор параметров, но не писать его в файл.
     * @param стрИмя имя параметра
     * @param стрЗначение его значение
     */
    public void установить_параметр(String стрИмя, String стрЗначение) {
        свойстваПриложения.setProperty(стрИмя, стрЗначение);
    }

    /**
     * Сохранение параметров конфигурации в конфигурационном файле.
     */
    public void записать_в_конфигурационный_файл() {

        FileWriter fwКонфигурация;
        try {
            fwКонфигурация = new FileWriter(файлКонфигурации);
            свойстваПриложения.store(fwКонфигурация, заголовокФайла);
        } catch (IOException ex) {
            throw new Crash("Ошибка записи файла конфигурации.");
        }

    }

    //~~~$$$~~~$$$~~~$$$~~~$$$~~~$$$~~~$$$~~~$$$~~~$$$~~~$$$~~~$$$~~~$$$~~~$$$~~~$$$~~~$$$
    //
    //                                  Наследуемый интерфейс
    //
    //~~~$$$~~~$$$~~~$$$~~~$$$~~~$$$~~~$$$~~~$$$~~~$$$~~~$$$~~~$$$~~~$$$~~~$$$~~~$$$~~~$$$

    //---$$$---$$$---$$$---$$$---$$$ protected переменные ---$$$---$$$---$$$---$$$---$$$--

    /** Параметры приложения: пара имя-значение, живут в конфигурационном файле. */
    protected Properties свойстваПриложения = new Properties();

    /** Помещается в начало файла. */
    protected String заголовокФайла;

    //---$$$---$$$---$$$---$$$---$$$--- protected методы ---$$$---$$$---$$$---$$$---$$$---

    //###%%%###%%%###%%%###%%%###%%%###%%%###%%%###%%%###%%%###%%%###%%%###%%%###%%%###%%%
    //
    //                               Внутренний интерфейс
    //
    //###%%%###%%%###%%%###%%%###%%%###%%%###%%%###%%%###%%%###%%%###%%%###%%%###%%%###%%%

    //---%%%---%%%---%%%---%%%--- private переменные ---%%%---%%%---%%%---%%%---%%%---%%%

    /** Файл, в котором хранятся параметры конфигурации. */
    private File файлКонфигурации;

    //---%%%---%%%---%%%---%%%---%%% private методы ---%%%---%%%---%%%---%%%---%%%---%%%--

    /**
     * Заполнить объект свойств параметрами по умолчанию и записать их в конфигурационный файл.
     */
    private void ИнициализироватьКонфигурационныйФайлУмолчаниями() {}
    
}
